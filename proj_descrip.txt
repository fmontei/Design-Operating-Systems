•	Description of overall design. Keep it succinct. Include description of data structures used to maintain log in the kernel, how the log is extracted from the kernel.
•	Description of experiment configuration used to evaluate overhead of interposer. Define points of measurements made.
o	We will expect figures illustrating some of this data you collect.
o	The kernel has an abundant resource of interfaces to encourage code reuse and performance. Mention some you may have used and why.
•	Challenges faced (and hopefully overcome!) in this project. 
•	We could not access factor-login.cc.gatech.edu, so we tried to get the right kernel version on our local virtual machine. We successfully installed the version, but when we rebooted to it, the virtual machine complained and broke down. 
•	We tried updating the integer in /proc/sysmonuid by directly writing to it (i.e. opening up the file itself and change the integer). However, it would not allow us to save the change, let alone letting the module updated to the current uid.
•	Suggestions for improvement. 
•	What you did/did not enjoy. 
•	We did not enjoy kernel coding because the virtual machine crashes as a whole if there is anything wrong with the code. In this situation, we had to reboot the system once there is some runtime bug.
•	What took the most time. Etc.
Bad user program? Update log directly or how to update it with a script?

